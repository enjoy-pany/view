!function(t){var o={};function s(n){if(o[n])return o[n].exports;var e=o[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,s),e.l=!0,e.exports}s.m=t,s.c=o,s.d=function(n,e,t){s.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},s.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},s.t=function(e,n){if(1&n&&(e=s(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)s.d(t,o,function(n){return e[n]}.bind(null,o));return t},s.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(e,"a",e),e},s.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},s.p="./",s(s.s="./src/Holdbacks.js")}({"./src/Holdbacks.js":
/*!**************************!*\
  !*** ./src/Holdbacks.js ***!
  \**************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\n(function (ns) {\n\n    var Holdbacks = ns.Holdbacks = Hilo.Class.create({\n        Extends: Hilo.Container,\n        constructor: function constructor(properties) {\n            Holdbacks.superclass.constructor.call(this, properties);\n\n            //管子之间的水平间隔\n            this.hoseSpacingX = 300;\n            this.numHoses = 2;\n            //移出屏幕左侧的管子数量，一般设置为管子总数的一半\n            this.numOffscreenHoses = this.numHoses * 0.5;\n            //管子的宽度（包括管子之间的间隔）\n            this.hoseWidth = 148 + this.hoseSpacingX;\n\n            this.createHoses(properties.image);\n        },\n        numHoses: 0, //管子的总数\n        groundY: 0, //地面的y轴坐标\n        hoseWidth: 0, //管子的宽度（包括管子之间的间隔）\n        createHoses: function createHoses(image) {\n            for (var i = 0; i < this.numHoses; i++) {\n                var downHose = new Hilo.Bitmap({\n                    id: 'down' + i,\n                    image: image,\n                    rect: [0, 0, 148, 820]\n                }).addTo(this);\n                this.placeHose(downHose, i);\n            }\n        },\n        placeHose: function placeHose(down, index) {\n            //x轴最大值\n            var downMaxX = ns.width - down.width;\n            //x轴最小值\n            var downMinX = down.width + 150;\n            //随机位置\n            down.y = 625;\n            down.x = (downMinX + (downMaxX - downMinX) * Math.random() >> 0) * index;\n            if (index === 1) {\n                this.initMoveTween(down.x);\n            }\n        },\n        resetHoses: function resetHoses() {\n            var total = this.children.length;\n            //把已移出屏幕外的管子放到队列最后面，并重置它们的位置\n            for (var i = 0; i < this.numOffscreenHoses; i++) {\n                var downHose = this.getChildAt(0);\n                this.setChildIndex(downHose, total - 1);\n                this.placeHose(downHose, this.numOffscreenHoses + i);\n            }\n            this.x = 0; // 重置位置\n            var downHose2 = this.getChildAt(0);\n            downHose2.x = 150;\n\n            //更新穿过的管子数量\n            // this.passThrough += this.numOffscreenHoses;\n        },\n        initMoveTween: function initMoveTween(x) {\n            //移动管子\n            this.moveTween = ns.moveTween = Hilo.Tween.to(this, {\n                x: -(x - 150)\n            }, {\n                duration: 2000,\n                loop: false,\n                delay: 500,\n                onComplete: this.resetHoses.bind(this)\n            });\n            this.moveTween.pause();\n        },\n        collisionTest: function collisionTest(bird) {\n            for (var i = 0, length = this.children.length; i < length; i++) {\n                if (bird.hitTestObject(this.children[i], true)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    });\n})(window.game);\n\n//# sourceURL=webpack:///./src/Holdbacks.js?")}});